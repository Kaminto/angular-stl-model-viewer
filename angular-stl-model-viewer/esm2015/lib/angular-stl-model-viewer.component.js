import { __awaiter, __decorate } from "tslib";
import { Component, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import * as THREE from 'three';
import { STLLoader } from 'three/examples/jsm/loaders/STLLoader';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
const defaultMeshOptions = {
    castShadow: true,
    position: new THREE.Vector3(0, 0, 0),
    receiveShadow: true,
    scale: new THREE.Vector3(0.03, 0.03, 0.03)
};
function isWebGLAvailable() {
    try {
        const canvas = document.createElement('canvas');
        return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));
    }
    catch (e) {
        return false;
    }
}
let StlModelViewerComponent = class StlModelViewerComponent {
    constructor(cdr, eleRef, ngZone) {
        this.cdr = cdr;
        this.eleRef = eleRef;
        this.ngZone = ngZone;
        this.stlModels = [];
        this.hasControls = true;
        this.camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 15);
        this.cameraTarget = new THREE.Vector3(0, 0, 0);
        this.light = new THREE.PointLight(0xffffff);
        this.material = new THREE.MeshPhongMaterial({ color: 0xc4c4c4, shininess: 100, specular: 0x111111 });
        this.scene = new THREE.Scene();
        this.renderer = new THREE.WebGLRenderer({ antialias: true });
        this.controls = null;
        this.meshOptions = [];
        this.rendered = new EventEmitter();
        this.hasWebGL = isWebGLAvailable();
        this.meshGroup = new THREE.Object3D();
        this.isRendered = false;
        this.showStlModel = true;
        this.stlLoader = new STLLoader();
        this.render = () => {
            this.renderer.render(this.scene, this.camera);
        };
        this.onWindowResize = () => {
            this.setSizes();
            this.render();
        };
        this.cdr.detach();
        // default light position
        this.light.position.set(1, 1, 2);
        // default camera position
        this.camera.position.set(3, 3, 3);
        // default scene background
        this.scene.background = new THREE.Color(0xffffff);
        // default renderer options
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.renderer.shadowMap.enabled = true;
    }
    ngOnInit() {
        if (!this.hasWebGL) {
            console.error('stl-model-viewer: Seems like your system does not support webgl.');
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.init();
        });
    }
    ngOnDestroy() {
        window.removeEventListener('resize', this.onWindowResize, false);
        this.meshGroup.remove();
        if (this.renderer) {
            this.renderer.renderLists.dispose();
            this.renderer.dispose();
        }
        if (this.camera) {
            this.camera.remove();
        }
        if (this.light) {
            this.light.remove();
        }
        if (this.material) {
            this.material.dispose();
        }
        if (this.controls) {
            this.controls.removeEventListener('change', this.render);
            this.controls.dispose();
        }
        if (this.scene) {
            this.scene.children.forEach((child) => {
                this.scene.remove(child);
            });
            this.scene.dispose();
        }
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.camera.add(this.light);
            this.scene.add(this.camera);
            // use default controls
            if (this.hasControls && !this.controls) {
                this.controls = new OrbitControls(this.camera, this.renderer.domElement);
                this.controls.enableZoom = true;
                this.controls.minDistance = 1;
                this.controls.maxDistance = 7;
                this.controls.addEventListener('change', this.render);
            }
            window.addEventListener('resize', this.onWindowResize, false);
            const meshCreations = this.stlModels.map((modelPath, index) => this.createMesh(modelPath, this.meshOptions[index]));
            const meshes = yield Promise.all(meshCreations);
            meshes.map((mesh) => this.meshGroup.add(mesh));
            this.scene.add(this.meshGroup);
            this.eleRef.nativeElement.appendChild(this.renderer.domElement);
            this.setSizes();
            this.render();
            this.ngZone.run(() => {
                this.isRendered = true;
                this.rendered.emit();
                this.cdr.detectChanges();
            });
        });
    }
    createMesh(path, meshOptions = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const geometry = yield this.stlLoader.loadAsync(path);
            const mesh = new THREE.Mesh(geometry, this.material);
            const vectorOptions = ['position', 'scale', 'up'];
            const options = Object.assign({}, defaultMeshOptions, meshOptions);
            Object.getOwnPropertyNames(options).forEach((option) => {
                if (vectorOptions.indexOf(option) > -1) {
                    const vector = options[option];
                    const meshVectorOption = mesh[option];
                    meshVectorOption.set(vector.x, vector.y, vector.z);
                }
                else {
                    mesh[option] = options[option];
                }
            });
            return mesh;
        });
    }
    setSizes() {
        const width = this.eleRef.nativeElement.offsetWidth;
        const height = this.eleRef.nativeElement.offsetHeight;
        this.camera.aspect = width / height;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(width, height);
    }
};
StlModelViewerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
__decorate([
    Input()
], StlModelViewerComponent.prototype, "stlModels", void 0);
__decorate([
    Input()
], StlModelViewerComponent.prototype, "hasControls", void 0);
__decorate([
    Input()
], StlModelViewerComponent.prototype, "camera", void 0);
__decorate([
    Input()
], StlModelViewerComponent.prototype, "cameraTarget", void 0);
__decorate([
    Input()
], StlModelViewerComponent.prototype, "light", void 0);
__decorate([
    Input()
], StlModelViewerComponent.prototype, "material", void 0);
__decorate([
    Input()
], StlModelViewerComponent.prototype, "scene", void 0);
__decorate([
    Input()
], StlModelViewerComponent.prototype, "renderer", void 0);
__decorate([
    Input()
], StlModelViewerComponent.prototype, "controls", void 0);
__decorate([
    Input()
], StlModelViewerComponent.prototype, "meshOptions", void 0);
__decorate([
    Output()
], StlModelViewerComponent.prototype, "rendered", void 0);
StlModelViewerComponent = __decorate([
    Component({
        changeDetection: ChangeDetectionStrategy.OnPush,
        selector: 'stl-model-viewer',
        template: '',
        styles: [`
:host {
  width: 100%;
  height: 100%;
  display: block;
}
  `]
    })
], StlModelViewerComponent);
export { StlModelViewerComponent };
//# sourceMappingURL=data:application/json;base64,